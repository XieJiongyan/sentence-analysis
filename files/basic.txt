class.+IsCntr classifier {
    true => cntr[k],
    false => NonCntr,
}

class NonCntr 

NonCntr.+BasicClassifier classifier {
    classNum == 1 => match (isReal) {
        true => ObjectInWorld,
        false => ThingsNotInWorld,
    },
    classNum > 1 && classNum != Infinity => match (makeChanges) {
        true => Motion,
        false => Connection,
    },
    classNum == Infinity => Value
}

class ObjectInWorld
class ThingsNotInWorld
class Motion
class Connection
class Value

class Connection.+IsRelative {
    var is_relative :bool
    classifier {
        is_relative => RelativeConnection,
        !is_relative => AbsoluteConnection,
    }
}

class RelativeConnection :Connection {
    var condition :cntr[AbsoluteProposition]
}

class Proposition :Connection {
    var isRight :bool
}

class AbsoluteProposition :Proposition :AbsoluteConnection
class RelativeProposition :Proposition :RelativeConnection {
    var whenCntr :cntr[Time]
    var place    :cntr[Place]
}

class.+IndividualEvaluation :RelativeProposition {
    var bases :set[Base]
    var$ consider_one(b: Base) bases.contains(b)

    val$ condition.include(consider_one)
}

class.+Ability :RelativeConnection //TODO: base can perform his ability 

class Proposition.+IsTruth {
    var isTrue :bool,
    var isOtherSays :bool,
    var sayer       :People,
}