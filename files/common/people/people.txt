class People :ObjectInWorld {
    cls Deny(Proposition)  :PeopleAction 
    cls Meet(People)       :PeopleAction
    cls Spot(Action)       :PeopleAction
    cls Hope(Connection)   :Connection
    cls Order(PeopleAction):PeopleAction
    cls Make(Connection)   :PeopleAction
    cls Let(Action)        :PeopleAction
    cls Get(Class)         :PeopleAction

    cls beAbleTo(->peopleAction) :PeopleAbility
    cls Want(A[]{Connection, Object})   :Connection
    cls WantTo(->PeopleAction)     :Connection

    cls use_to(class, Action) :PeopleAction

    $ people.beAbleTo(peopleAction) => peopleAction.super == people

    cls write(readable)    :PeopleAction

    cls setDown            :PeopleAction //指一种可能发生的行为. 1 可以发生多次, 2 可以不发生
    cls beAwareOf(class)   :PeopleAction//意识到
    cls SuccessIn(PeopleAction) :PeopleAction

    var similar_to(people) :RelativeProposition
    var isHandsome         :RelativeProposition
    var isYoung            :RelativeProposition

    var liveBetter         :RelativeProposition
}

